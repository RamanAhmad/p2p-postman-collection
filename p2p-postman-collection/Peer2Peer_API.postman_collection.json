{
	"info": {
		"_postman_id": "6e3de2e9-ba09-4816-ba46-4ec6cef1838f",
		"name": "Peer2Peer API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "39484978",
		"_collection_link": "https://vs-starteam.postman.co/workspace/Team-Workspace~01d6b382-1387-40ea-8495-538c2634f4a0/collection/23100563-6e3de2e9-ba09-4816-ba46-4ec6cef1838f?action=share&source=collection_link&creator=39484978"
	},
	"item": [
		{
			"name": "system",
			"item": [
				{
					"name": "register with sol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var status = pm.response.code;\r",
									"var validStatus = [200, 401, 403, 409];\r",
									"\r",
									"\r",
									"if (pm.variables.has(\"TEST_NAME\") && pm.variables.get(\"TEST_NAME\") === \"POST_register\") {\r",
									"    // Verify the response status code is valid\r",
									"    pm.test(\"Valid response status code\", function () {\r",
									"        pm.expect(validStatus).to.include(status);\r",
									"    });\r",
									"\r",
									"    // Verify the response body is empty\r",
									"    pm.test(\"Response body is empty\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"    });\r",
									"\r",
									"    // Verify the response status code matches the expected status\r",
									"    pm.test(pm.variables.get(\"CASE_DESC\"), function() {\r",
									"        pm.expect(status).to.eql(pm.variables.get(\"EXPECTED_STATUS\"));\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"star\": \"{{STAR_UUID}}\",\r\n    \"sol\": {{SOL_UUID}},\r\n    \"component\": {{COM_SELF_UUID}},\r\n    \"com-ip\": \"{{COM_SELF_IP}}\",\r\n    \"com-tcp\": {{COM_SELF_TCP}},\r\n    \"status\": \"{{OK}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/system/",
						"description": "### Register with SOL\n\nThis endpoint allows you to register a component with SOL by making an HTTP POST.\n\n#### Request Body\n\n- `star`: STAR-UUID of the star.\n    \n- `sol`: COM-UUID of SOL.\n    \n- `component`: COM-UUID of the registering component.\n    \n- `com-ip`: IP address of the registering component.\n    \n- `com-tcp`: PORT at the registering component for the tcp connection.\n    \n- `status`: STATUS of the register process. Default: 200.\n    \n\n#### Response\n\nThe response format is `text/plain` with the following possible response codes:\n\n- 200: OK\n    \n- 401: Unauthorized: mismatching information about the star\n    \n- 403: No room left | Forbidden: Star is full\n    \n- 409: Conflict: mismatching information about the registering component\n    \n\nThe response text itself is always empty."
					},
					"response": []
				},
				{
					"name": "get component status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response;\r",
									"var status = response.code;\r",
									"var validStatus = [200, 401, 409];\r",
									"var validKeys = ['star', 'sol', 'component', 'com-ip', 'com-tcp', 'status'];\r",
									"\r",
									"\r",
									"if (pm.variables.has(\"TEST_NAME\") && pm.variables.get(\"TEST_NAME\") === \"GET_status\") {\r",
									"\r",
									"    // TEST 1: valid status code\r",
									"    pm.test(\"Valid response status code\", function (){\r",
									"        if (!pm.expect(validStatus).to.include(status)) return;\r",
									"    });\r",
									"\r",
									"    // Verify the response status code matches the expected status\r",
									"    pm.test(pm.variables.get(\"CASE_DESC\"), function() {\r",
									"        pm.expect(status).to.eql(pm.variables.get(\"EXPECTED_STATUS\"));\r",
									"    });\r",
									"\r",
									"\r",
									"    // TEST 2 - 5: valid response format\r",
									"    if (status === 200) {\r",
									"\r",
									"        var dontQuit = true;\r",
									"\r",
									"        // TEST 2: check for existence of response body if status code is 200\r",
									"        pm.test(\"Response body not empty and json format\", function () {\r",
									"            dontQuit = pm.expect(response.text()).to.not.be.empty && pm.expect(response).to.be.json;\r",
									"        });\r",
									"\r",
									"        if (dontQuit) {\r",
									"            // get body\r",
									"            var jsonData = response.json();\r",
									"            // get keys\r",
									"            var keys = Object.keys(jsonData);\r",
									"\r",
									"            // TEST 3: only legal keys\r",
									"            pm.test(\"Response contains all and only valid keys\", function () {\r",
									"                keys.forEach(function(key) {\r",
									"                    pm.expect(key).to.be.oneOf(validKeys);\r",
									"                });\r",
									"            });\r",
									"\r",
									"            // TEST 4: no empty values\r",
									"            pm.test(\"All response keys have non-empty values\", function () {\r",
									"                Object.keys(jsonData).forEach(function(key) {\r",
									"                    pm.expect(jsonData[key]).to.not.be.empty;\r",
									"                });\r",
									"            });\r",
									"        }\r",
									"\r",
									"        \r",
									"    } else {\r",
									"        // TEST 5: empty response body\r",
									"        pm.test(\"Body is empty is response if code != OK\", function () {\r",
									"            pm.expect(response.text()).to.be.empty;\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{base_url}}/system/:COM_UUID?star={{STAR_UUID}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"system",
								":COM_UUID"
							],
							"query": [
								{
									"key": "star",
									"value": "{{STAR_UUID}}"
								}
							],
							"variable": [
								{
									"key": "COM_UUID",
									"value": "{{COM_PATH}}"
								}
							]
						},
						"description": "### GET component status\n\nThis endpoint allows SOL to check on a component, whether it is still active and functioning.\n\n#### Path variables\n\n- `COM-UUID`: COM-UUID of the component to check on.\n    \n\n#### Request parameters\n\n- `star`: STAR-UUID of the star.\n    \n\n#### Response\n\nThe response format is `application/json` with the following possible response codes:\n\n- 200: OK: Component active and part of the requested star\n    \n- 401: Unauthorized: Component not part of the requested star OR empty COM-UUID\n    \n- 409: Conflict: mismatching COM-UUID\n    \n\nIf the response code is not 200, the response body is empty. Else, the response body consists of the following key-value-pairs:\n\n- `star`: STAR-UUID of the star.\n    \n- `sol`: COM-UUID of SOL.\n    \n- `component`: COM-UUID of the registering component.\n    \n- `com-ip`: IP address of the checked component.\n    \n- `com-tcp`: PORT of the checked component.\n    \n- `status`: STATUS of the checked component."
					},
					"response": []
				},
				{
					"name": "send heart beat",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"base_url: \" + pm.environment.get(\"base_url\"))\r",
									"var status = pm.response.code;\r",
									"var validStatus = [200, 401, 404, 409];\r",
									"\r",
									"if (pm.variables.has(\"TEST_NAME\") && pm.variables.get(\"TEST_NAME\") === \"PATCH_heartbeat\") {\r",
									"    pm.test(\"One of valid response status codes\", function (){\r",
									"        pm.expect(validStatus).to.include(status);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response body is empty\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"    });\r",
									"\r",
									"    // Verify the response status code matches the expected status\r",
									"    pm.test(pm.variables.get(\"CASE_DESC\"), function() {\r",
									"        pm.expect(status).to.eql(pm.variables.get(\"EXPECTED_STATUS\"));\r",
									"    });\r",
									"\r",
									"    console.log(\"base_url: \" + pm.environment.get(\"base_url\"))\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"star\": \"{{STAR_UUID}}\",\r\n    \"sol\": {{SOL_UUID}},\r\n    \"component\": {{COM_SELF_UUID}},\r\n    \"com-ip\": \"{{COM_SELF_IP}}\",\r\n    \"com-tcp\": {{COM_SELF_TCP}},\r\n    \"status\": {{STATUS}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/system/:COM_UUID",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"system",
								":COM_UUID"
							],
							"variable": [
								{
									"key": "COM_UUID",
									"value": "{{COM_SELF_UUID}}"
								}
							]
						},
						"description": "### Send heart beat\n\nThis endpoint is used to send regulary heart beats from any component of a star to the SOL.\n\n#### Request Body\n\n- `star`: STAR-UUID of the star\n    \n- `sol`: COM-UUID of the sol\n    \n- `component`: COM-UUID of the heart beat sending component\n    \n- `com-ip`: IP of the component\n    \n- `com-tcp`: PORT at the component for the tcp connection\n    \n- `status`: STATUS\n    \n\n#### Response\n\nThe response format is `text/plain` with the following possible response codes:\n\n- 200: OK\n    \n- 401: Unauthorized: responding component is not SOL\n    \n- 404: Requesting component is not part of the star\n    \n- 409: Conflict: missmatch between stored information and the information sent within the request body OR status in request body is not 200\n    \n\nThe response text itself is always empty."
					},
					"response": []
				},
				{
					"name": "unregister component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var status = pm.response.code;\r",
									"var validStatus = [200, 404];\r",
									"\r",
									"\r",
									"if (pm.variables.has(\"TEST_NAME\") && pm.variables.get(\"TEST_NAME\") === \"DEL_unregister_component\") {\r",
									"    pm.test(\"Valid response status code\", function (){\r",
									"        pm.expect(validStatus).to.include(status);\r",
									"    });\r",
									"\r",
									"    // Verify the response status code matches the expected status\r",
									"    pm.test(pm.variables.get(\"CASE_DESC\"), function() {\r",
									"        pm.expect(status).to.eql(pm.variables.get(\"EXPECTED_STATUS\"));\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/system/:COM_UUID?star={{STAR_UUID}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"system",
								":COM_UUID"
							],
							"query": [
								{
									"key": "star",
									"value": "{{STAR_UUID}}"
								}
							],
							"variable": [
								{
									"key": "COM_UUID",
									"value": "{{COM_SELF_UUID}}"
								}
							]
						},
						"description": "### DELETE component from star\n\nThis endpoint allows a component to unregister itself from a star. It can also be used by SOL to remove a specific component.\n\n#### Path Variables\n\n- `COM-UUID`: COM-UUID of the component to be unregistered.\n    \n\n#### Request Parameters\n\n- `star`: STAR-UUID of the star.\n    \n\n#### Response\n\nThe response format is `text/plain`, where the text is always empty. If the request is being sent **from a component to SOL**, the following response codes are valid:\n\n- `200`: OK: Component successfully removed from the star.\n    \n- `401`: Unauthorized: Invalid IP of requesting component and/or unknown/wrong STAR-UUID.\n    \n- `404`: Not Found: Component not known by SOL.\n    \n\nIf instead the request is being sent from SOL to a component, these responses are valid:\n\n- `200`: OK: Component successfully removed from the star.\n    \n- `401`: Unauthorized: Invalid IP of requesting SOL and/or unknown/wrong STAR-UUID."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}